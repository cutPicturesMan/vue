/* @flow */

import VNode, { createTextVNode } from 'core/vdom/vnode'
import { isFalse, isTrue, isDef, isUndef, isPrimitive } from 'shared/util'

// 模板编译器试图在编译阶段，通过静态分析模板，将标准化的需求最小化
// The template compiler attempts to minimize the need for normalization by
// statically analyzing the template at compile time.
//
// 对于纯的HTML标签，由于渲染函数能够保证返回Array<VNode>，因此可以跳过
// 以下有2种情况需要额外的标准化
// For plain HTML markup, normalization can be completely skipped because the
// generated render function is guaranteed to return Array<VNode>. There are
// two cases where extra normalization is needed:

// 1、当子标签包含组件时，需要标准化
// 因为函数式组件可能会返回数组来代替单一根节点
// 这种情况下，只需要简单标准化即可：如果任意子级是数组，我们通过Array.prototype.concat将数组打平
// 它可以保证只有1级深，因为函数式组件已经将其子级标准化了
// 1. When the children contains components - because a functional component
// may return an Array instead of a single root. In this case, just a simple
// normalization is needed - if any child is an Array, we flatten the whole
// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
// because functional components already normalize their own children.
export function simpleNormalizeChildren (children: any) {
  for (let i = 0; i < children.length; i++) {
    if (Array.isArray(children[i])) {
      // apply接收数组为参数，通过其将children数组打平 [[1]] -> [1]
      return Array.prototype.concat.apply([], children)
    }
  }
  return children
}

// 2、当子标签包含构造器时，总会生成嵌套的数组，如<template>、<slot>、v-for以及用户通过render渲染函数/JSX手写的子标签
// 这种情况需要全面的标准化，来满足子标签所有可能的类型
// 2. When the children contains constructs that always generated nested Arrays,
// e.g. <template>, <slot>, v-for, or when the children is provided by user
// with hand-written render functions / JSX. In such cases a full normalization
// is needed to cater to all possible types of children values.
export function normalizeChildren (children: any): ?Array<VNode> {
  return isPrimitive(children)
    ? [createTextVNode(children)]
    : Array.isArray(children)
      ? normalizeArrayChildren(children)
      : undefined
}

function isTextNode (node): boolean {
  return isDef(node) && isDef(node.text) && isFalse(node.isComment)
}

function normalizeArrayChildren (children: any, nestedIndex?: string): Array<VNode> {
  const res = []
  let i, c, lastIndex, last
  for (i = 0; i < children.length; i++) {
    c = children[i]
    // TODO 排除掉false节点？节点什么时候是false和null？
    // https://github.com/vuejs/vue/issues/4466
    if (isUndef(c) || typeof c === 'boolean') continue
    lastIndex = res.length - 1
    // res中的最后一个元素
    last = res[lastIndex]
    // nested
    // 如果有子级，则处理
    if (Array.isArray(c)) {
      // 如果子级为空数组，则不处理
      // TODO https://github.com/vuejs/vue/issues/6790
      if (c.length > 0) {
        // TODO https://github.com/vuejs/vue/issues/3913
        c = normalizeArrayChildren(c, `${nestedIndex || ''}_${i}`)
        // merge adjacent text nodes
        if (isTextNode(c[0]) && isTextNode(last)) {
          res[lastIndex] = createTextVNode(last.text + (c[0]: any).text)
          c.shift()
        }
        // 将v-for的子级打平，与父级同级
        res.push.apply(res, c)
      }
    } else if (isPrimitive(c)) {
      if (isTextNode(last)) {
        // merge adjacent text nodes
        // this is necessary for SSR hydration because text nodes are
        // essentially merged when rendered to HTML strings
        res[lastIndex] = createTextVNode(last.text + c)
      } else if (c !== '') {
        // convert primitive to vnode
        res.push(createTextVNode(c))
      }
    } else {
      // 如果当前节点与上一个节点都是字符串，则可以合并渲染
      if (isTextNode(c) && isTextNode(last)) {
        // 合并相邻文本节点
        // merge adjacent text nodes
        res[lastIndex] = createTextVNode(last.text + c.text)
      } else {
        // 为类似v-for之类生成的数组元素，添加默认key值
        // default key for nested array children (likely generated by v-for)
        // TODO _isVList干吗用的？
        // https://github.com/vuejs/vue/issues/5618
        if (isTrue(children._isVList) &&
          isDef(c.tag) &&
          isUndef(c.key) &&
          isDef(nestedIndex)) {
          c.key = `__vlist${nestedIndex}_${i}__`
        }
        res.push(c)
      }
    }
  }
  return res
}
